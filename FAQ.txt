/usr/local/bin/code
------------------------------------------------------------
groovy -e "println InetAddress.localHost"
groovy -e "println InetAddress.localHost.hostAddress"
groovy -e "println InetAddress.localHost.canonicalHostName"
http://media.pragprog.com/titles/sdgrvr/web_services.pdf
------------------------------------------------------------
telnet 23 numaralı portu kullanır.ssh bağlanrısından farkı 
paketlerin şifrelenmeden transfer edilmesidir.
------------------------------------------------------------
curl -I -X GET https://www.n11.com   --> -I:Only header
------------------------------------------------------------
cat MOCK_DATA.csv | tr ',' ';' //replaceAll
cat MOCK_DATA.csv | cut -d, -f1,2,3 //-d:delimiter(,), -f:field(1.,2.,3. Kolonları listeler)
cat MOCK_DATA.csv | awk -F',' '{print $1}' // -F:delimiter.
https://www.mockaroo.com
------------------------------------------------------------
touch slyman.{01..12}.{01..09}.txt
------------------------------------------------------------
$(!!) --> !! işareti ile ensen verilen komut refere edilir
------------------------------------------------------------
find . -type d | while read filename; do echo $filename;done
------------------------------------------------------------
find . -depth 1 -name *.txt -ls
------------------------------------------------------------
printenv environment veriable'ları listeler
------------------------------------------------------------
ping -c 3 -w 1 8.8.8.8 // -c:loop count, -w:stands for time out
------------------------------------------------------------
/bin/bash is an interpreter.

Most common shebangs are;
#!bin/bash
#!bin/zsh
#!bin/ksh
#!bin/csh
#!/usr/bin/phyton

If a script doesn't contain a shebang, the command are 
executed using default interpreter.

#!/path/to/interpreter
------------------------------------------------------------
The first line of a shell script typically starts with a shebang followed by the path to an interpreter that will be used to execute the commands in the script.

If you do not supply a shebang and specify an interpreter on the first line of the script the commands in the script will be executed using your current shell.
------------------------------------------------------------
Condition are always written in []     

File operator;
-d FILE TRUE IF FILE IS A DIRECTORY
-e FILE TRUE IF FILE EXİST
-f FILE TRUE IF FILE EXİST AND REGULAR FILE
-r FILE TRUE IF FILE IS READABLE BY YOU
-s FILE TRUE IF FILE EXIST AND IS NOT EMPTY
-w FILE TRUE IF FILE IS WRITEABLE BY YOU
-x FILE TRUE IF FILE IS EXECUTABLE BY YOU
------------------------------------------------------------
String operators;
-z STRING TRUE IF STRING IS EMPTY
-n STRING TRUE IF STRING IS NOT EMPTY
STRING1 = STRING2 TRUE IF STRINGS ARE EQUAL
STRING1 != STRING2 TRUE IF STRINGS ARE NOT EQUAL
------------------------------------------------------------
Aritmetik operators;
arg1 -eq arg2 //equal
arg1 -ne arg2 //not equal

arg1 -lt arg2 //less then
arg1 -le arg2 //less then or equal

arg1 -gt arg2 //grether then
arg1 -ge arg2 //grether then or equal
------------------------------------------------------------
if[condition1]
then
command
else
command 
fi
------------------------------------------------------------
if[condition1]
then
command 
elif[condition2]
then
command 
else
command 
fi
------------------------------------------------------------
For loop

for variable_name in item1 itemN
do
command1
command2
commandN
done

Example

for isim in selime karadeni aktaş
do
echo "İsim : $isim"
done
------------------------------------------------------------
date +%F -> tarihi düzgün formatta verir.
------------------------------------------------------------
./slyman.sh Suleyman Aktas

$0 : scriptName.sh  # ./slyman.sh
$1 : parameter1.    # Suleyman
$2 : parameter2     # aktas
------------------------------------------------------------
Use read accept input;

read -p "Enter user name: " USER
echo "User name : $USER"
------------------------------------------------------------
$VARIABLE_NAME
${VARIABLE_NAME}
VARIANLE_NAME="value"
VARIANLE_NAME=$(command)
VARIANLE_NAME=`command`
------------------------------------------------------------
command1 && command2 //if exit status of command1 is 0(success)
			command2 not executed
command1 || command2 //if exit status of command1 is not 0(fail)
			command2 executed
command1 ; command2 //command1 and command2 will be executed no 
			matter the exit status of the previous command.
------------------------------------------------------------
Creating function;

1)
function function_name(){
command
}

2)
function_name(){
command
}

You can call the method with just a method name without parantesies
 function_name

Example;
#/bin/bash

function slyman(){
echo "slyman"
now
}

function now(){
echo "It's $(date+%r)"
}

slyman //call slyman function after declaring now method

=> in bash scriptin declare all method before using them
------------------------------------------------------------
Positional parameters;

. The first parameter is stored in $1
. The second parameter is stored in $2, etc
. $@ contains all of the parameters
. $0 script itself, not function name

Example;

Fiction hello(){
for NAME in $@ 
do
 echo "Hello $NAME"
done
} 

hello Suleyman Selime UTku

Output;
hello Suleyman
hello Selime
hello Utku
------------------------------------------------------------
Variable scope;
. By default all variable are global
. Variable have to be defined before used

Examples;

VAR=1
my_function
#VAR is availiable in the function 
--------
my_function
VAR=1
#VAR is NOT availiable in the function
--------
my_funciton(){
VAR=1
}
echo $VAR //Blank line
#VAR is NOT availiable yet
my_function
#VAR is availiable after executed my_function
echo $VAR //1	
------------------------------------------------------------
Local variable;
. Create using local keyword
local LOCAL_VAR=1
------------------------------------------------------------
Exit status(Return codes);

. Functions have exit status
Eplicity
 return <RETURN_CODE>
Implicity
 The exit status of last command executed in the function
. Valid exit codes range from 0 to 255
. 0 = success
. $? = the exit status
------------------------------------------------------------
BASENAME command;

basename ~/Desktop/Files/slyman
slyman

->path'i verilen dosyanın adını yazdırır.
------------------------------------------------------------
Date +%F //günün tarihini verir.
------------------------------------------------------------
Shell script order and checklist;

1.Shebang
2.Comments/file header
3.Global variables
4.Functions(use local variables)
5.Main script content
6.Exit with an status code
------------------------------------------------------------
Wildcards;

* - matches zero or more character
-> *.txt
-> a*
-> a*.txt

 ? - matches exactly one character
-> ?.txt
-> a?
-> a?.txt
---------------------------------------------------------------
More wildcards - character classes;

[] - A character class
-> without star matches exactly one character between the brackets.
example;
ca[ntr]
 . can
 . car
 . cat
 
-> with star matches any of characters included between the bracket
example;
ca[nt]*
 . can
 . cat
 . car
 . candy
 . catch
    .
    .

-> [!] - matches any of the characters NOT included between the brackets.
Matches exactly one character
example;
[!aeiou]* ---> bu harflerden birisi ile başlamayan kelimeler eşleşir.
 . baseball
 . cricket
---------------------------------------------------------------
Ranges;

-> [a-g]* matches all files start with a,b,c,d,e,f or g
-> [3-6]* matches all files start with 3,4,5 or 6
---------------------------------------------------------------
Named Character Classes;

[[:alpha:]] #alhabetic characters.Both lower and upper case
[[:alnum:]] #Alphanumeric characters 
[[:digit:]] #numbers and decimals between 0 - 9
[[:lower:]] #lower case letter
[[:space:]] #white spaces
[[:upper:]] #upper case letter
---------------------------------------------------------------
Matching Wildcard pattern;

 \ - escape character.Use if you want to match wildcard character
-> *\? ---> match all files end with question mark
---------------------------------------------------------------
Case statement;

case "$VAR" in 
	pattern_1)
		command1
		;;
	pattern_2)
		command2
		;;
esac

=> if $1 doesn't match any of then any command will execute	
---------
Examples;

case "$1" in
	start)   --->if first parameter equal start
		/usr/sbin/sshd
		;;
	stop)	 --->if first parameter equal stop
		kill $(cat /var/run/sshd.pid)
		;;
esac	

---------

case "$1" in
	start|START)   --->if first parameter equal start
		/usr/sbin/sshd
		;;
	stop|STOP)	 --->if first parameter equal stop
		kill $(cat /var/run/sshd.pid)
		;;
	*)	   --->Stands for default case 	
		echo "Usage: $0 start|stop" ;exit 1
	;;			
esac

---------

read -p "Enter y or n: " ANSWER

case "$ANSWER" in
	[yY] | [yY] [eE] [sS]
		echo "You answered yes."
		;;
	[nN] | [nN] [oO]
		echo "You answered no."	
		;;
	*)
		echo "Invalid answer!"	
		;;
esac					
---------------------------------------------------------------
Logging with logger;

-> The syslog standard uses facilities and severities to categorize messages
Facilities = kern, user, mail, deamon, auth, local0, local1
Severities = emerg, alert, crit, err, warning, notice, info

=> useage ---> facility.severity  //lcoal0.info, auth.alert, ...
=> By default ---> user.notice

logger "message"  #default user.notice
logger -s "message"  # -s: for display on the terminal screen
logger -p local0.info "message" # -p: set facility.severity
logger -t slymanscript -p local0.info "message"    # -t: set tag.Set a name to log file for identify inside all logs
logger -i -t slymanscript "message" # -i: set pid or proccess id to log
---------------------------------------------------------------
while loop format;

while [condition_is_true]
do 
 command1
 command2
   .
   .
 #commandn must be change the condition to false
done   
------------
Example - loop 5 times;

INDEX=1
while[ $INDEX -lt 6]
do
 command
 ((INDEX++))
done 
------------
Example - Checking user input

#while ["$CORRECT" != "y"]  #Parantez içerisinde 1'er boşlık burakmazsan çalışmaz [ expression ] 
while [ "$CORRECT" != "y" ]
do
 read -p "Enter your name : " NAME
 read -p "Is ${NAME} correct? " CORRECT
done 
------------
Example - Return code 0f command

while ping -c 1 www.google.com >/dev/null
do
 echo "google still up..."
 sleep 1
done
 echo  "google down, continuing."
------------

=> You can make matematical expression between double parantesies
((VAR+2)
---------------------------------------------------------------
Reading a file, line-by-line

LINE_NUM=1
while read LINE
do
 echo "${LINE_NUM} : ${LINE}"
 ((LINE_NUM++))
done < /etc/fstab      # /etc/fsteb is the file that you want to read line by line
-----------------
Example with one variable;

grep xfs /etc/fstab | while read LINE
do 
 echo "xfs: ${LINE}"
done 
-----------------
Example with multiple variable;

grep xfs /etc/fstab | while read WORD1 WORD2 REST
do 
 echo "first line: ${WORD1}, ${WORD2} and ${REST}"
  echo "Then line: ${WORD1}, ${WORD2} and ${REST}"
done 

=> birden fazla parametre verilirse (WORD1 WORD2 REST) 
. ilk satırı boşluklar ile böler ve her elemanı array'e atar.
. Her değişkene array'in elemanlarını sira ile atar
. Array'in kalan kısmını son değişkene atar.
---------------------------------------------------------------
while true
do
 read -p "1: Show disk usage. 2: Show uptime. " CHOICE
 case "$CHOICE" in
  1)
   df -h
   ;;
  2)
   uptime
   ;;
  *)
   break
   ;;
 esac
done     
---------------------------------------------------------------
BREAK;
If you want to exit a loop before it's normal ending, use the break statement.

CONTIUE;
If you want to restart the loop at the next iteration before the loop completes, use the continue statement.

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
